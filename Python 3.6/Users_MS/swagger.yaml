swagger: '2.0'
info:
  title: Users_MS
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
paths:
  /:
    get:
      operationId: application.hello_world
      summary: "Hello World!"
      tags: [Users_MS]
      responses:
        200:
          description: OK
  /users:
    post:
      operationId: application.create_user
      tags: [Users_MS]
      summary: "Creates user with given parameters"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be created"
        required: true
        schema:
          $ref: '#/definitions/Create_User'
      responses:
        201:
          description: "Created."
        400:
          description: "Bad request."
        409:
          description: "Conflict."
        500:
          description: "Internal server error."
    get:
      operationId: application.read_user
      tags: [Users_MS]
      summary: "Returns an user given an email"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "email"
        type: "string"
        required: true
        description: "User email"
      security:
        - JWT: []
      responses:
        200:
          description: "OK."
          schema:
            $ref: '#/definitions/Read_User'
        400:
          description: "Bad request."
        404:
          description: "Not Found."
        500:
          description: "Internal server error."
  /users/{id}:
    put:
      operationId: application.update_user
      tags: [Users_MS]
      summary: "Updates user with given parameters"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        type: "integer"
        required: true
      - in: "body"
        name: "body"
        description: "User object to be updated"
        required: true
        schema:
          $ref: '#/definitions/Create_User'
      security:
        - JWT: []
      responses:
        200:
          description: "OK."
        400:
          description: "Bad request."
        404:
          description: "Not found."
        409:
          description: "Conflict."
        500:
          description: "Internal server error."
    delete:
      operationId: application.delete_user
      tags: [Users_MS]
      summary: "Deletes user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        type: "integer"
        required: true
      security:
        - JWT: []
      responses:
        200:
          description: "OK."
        400:
          description: "Bad request."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
  /login:
    post:
      operationId: application.check_login
      tags: [Users_MS]
      summary: "Checks login credentials"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login credentials"
        required: true
        schema:
          $ref: '#/definitions/Login_User'
      responses:
        200:
          description: "OK."
        400:
          description: "Bad request."
        500:
          description: "Internal server error."

definitions:
  Create_User:
    type: "object"
    required:
    - "name"
    - "email"
    - "password"
    properties:
      name:
        type: "string"
        example: "John Doe"
        description: "User real name"
      email:
        type: "string"
        example: "johndoe@email.com"
        description: "Email"
      password:
        type: "string"
        example: "123456"
        description: "Password"
  Read_User:
    type: "object"
    required:
    - "id"
    - "name"
    - "email"
    properties:
      id:
        type: "integer"
        example: "1"
        description: "User id"
      name:
        type: "string"
        example: "John Doe"
        description: "User real name"
      email:
        type: "string"
        example: "johndoe@email.com"
        description: "Email"
  Login_User:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        example: "johndoe@email.com"
        description: "Email"
      password:
        type: "string"
        example: "123456"
        description: "Password"

securityDefinitions:
  JWT:
    type: apiKey
    name: Authorization
    in: header

